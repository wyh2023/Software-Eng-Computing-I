package com.njuse.jvmfinal.execution;

import com.njuse.jvmfinal.instructions.base.Instruction;
import com.njuse.jvmfinal.instructions.comparisons.*;
import com.njuse.jvmfinal.instructions.comparisons.IFACMP.IF_ACMPEQ;
import com.njuse.jvmfinal.instructions.comparisons.IFACMP.IF_ACMPNE;
import com.njuse.jvmfinal.instructions.comparisons.IFCOND.*;
import com.njuse.jvmfinal.instructions.comparisons.IFICMP.*;
import com.njuse.jvmfinal.instructions.constants.*;
import com.njuse.jvmfinal.instructions.constants.DCONST_N.DCONST_0;
import com.njuse.jvmfinal.instructions.constants.DCONST_N.DCONST_1;
import com.njuse.jvmfinal.instructions.constants.FCONST_N.FCONST_0;
import com.njuse.jvmfinal.instructions.constants.FCONST_N.FCONST_1;
import com.njuse.jvmfinal.instructions.constants.FCONST_N.FCONST_2;
import com.njuse.jvmfinal.instructions.constants.ICONST_N.ICONST_M1;
import com.njuse.jvmfinal.instructions.constants.ICONST_N.ICONST_N;
import com.njuse.jvmfinal.instructions.constants.LCONST_N.LCONST_0;
import com.njuse.jvmfinal.instructions.constants.LCONST_N.LCONST_1;
import com.njuse.jvmfinal.instructions.control.*;
import com.njuse.jvmfinal.instructions.conversions.*;
import com.njuse.jvmfinal.instructions.extended.IFNONNULL;
import com.njuse.jvmfinal.instructions.extended.IFNULL;
import com.njuse.jvmfinal.instructions.extended.WIDE;
import com.njuse.jvmfinal.instructions.loads.*;
import com.njuse.jvmfinal.instructions.loads.ArrayLoad.*;
import com.njuse.jvmfinal.instructions.math.ADD.DADD;
import com.njuse.jvmfinal.instructions.math.ADD.FADD;
import com.njuse.jvmfinal.instructions.math.ADD.IADD;
import com.njuse.jvmfinal.instructions.math.ADD.LADD;
import com.njuse.jvmfinal.instructions.math.AND.IAND;
import com.njuse.jvmfinal.instructions.math.AND.LAND;
import com.njuse.jvmfinal.instructions.math.DIV.DDIV;
import com.njuse.jvmfinal.instructions.math.DIV.FDIV;
import com.njuse.jvmfinal.instructions.math.DIV.IDIV;
import com.njuse.jvmfinal.instructions.math.DIV.LDIV;
import com.njuse.jvmfinal.instructions.math.IINC;
import com.njuse.jvmfinal.instructions.math.MUL.DMUL;
import com.njuse.jvmfinal.instructions.math.MUL.FMUL;
import com.njuse.jvmfinal.instructions.math.MUL.IMUL;
import com.njuse.jvmfinal.instructions.math.MUL.LMUL;
import com.njuse.jvmfinal.instructions.math.NEG.DNEG;
import com.njuse.jvmfinal.instructions.math.NEG.FNEG;
import com.njuse.jvmfinal.instructions.math.NEG.INEG;
import com.njuse.jvmfinal.instructions.math.NEG.LNEG;
import com.njuse.jvmfinal.instructions.math.OR.IOR;
import com.njuse.jvmfinal.instructions.math.OR.LOR;
import com.njuse.jvmfinal.instructions.math.REM.DREM;
import com.njuse.jvmfinal.instructions.math.REM.FREM;
import com.njuse.jvmfinal.instructions.math.REM.IREM;
import com.njuse.jvmfinal.instructions.math.REM.LREM;
import com.njuse.jvmfinal.instructions.math.SH.*;
import com.njuse.jvmfinal.instructions.math.SUB.DSUB;
import com.njuse.jvmfinal.instructions.math.SUB.FSUB;
import com.njuse.jvmfinal.instructions.math.SUB.ISUB;
import com.njuse.jvmfinal.instructions.math.SUB.LSUB;
import com.njuse.jvmfinal.instructions.math.XOR.IXOR;
import com.njuse.jvmfinal.instructions.math.XOR.LXOR;
import com.njuse.jvmfinal.instructions.references.*;
import com.njuse.jvmfinal.instructions.stack.*;
import com.njuse.jvmfinal.instructions.stores.*;
import com.njuse.jvmfinal.instructions.stores.ArrayStores.*;
import com.njuse.jvmfinal.runtime.OperandStack;

import java.awt.image.LookupOp;

public class Opcode {

    public Opcode(){}

    public Instruction newInstruction(int opcode){
        switch (opcode){
            case 0x00: return new NOP();
            case 0x01: return new ACONST_NULL();
            case 0x02: return new ICONST_M1();
            case 0x03: return new ICONST_N(0);
            case 0x04: return new ICONST_N(1);
            case 0x05: return new ICONST_N(2);
            case 0x06: return new ICONST_N(3);
            case 0x07: return new ICONST_N(4);
            case 0x08: return new ICONST_N(5);
            case 0x09: return new LCONST_0();
            case 0x0a: return new LCONST_1();
            case 0x0b: return new FCONST_0();
            case 0x0c: return new FCONST_1();
            case 0x0d: return new FCONST_2();
            case 0x0e: return new DCONST_0();
            case 0x0f: return new DCONST_1();
            case 0x10: return new BIPUSH();
            case 0x11: return new SIPUSH();
            case 0x12: return new LDC();
            case 0x13: return new LDC_W();
            case 0x14: return new LDC2_W();
            case 0x15: return new ILOAD();
            case 0x16: return new LLOAD();
            case 0x17: return new FLOAD();
            case 0x18: return new DLOAD();
            case 0x19: return new ALOAD();
            case 0x1a: return new ILOAD_N(0);
            case 0x1b: return new ILOAD_N(1);
            case 0x1c: return new ILOAD_N(2);
            case 0x1d: return new ILOAD_N(3);
            case 0x1e: return new LLOAD_N(0);
            case 0x1f: return new LLOAD_N(1);
            case 0x20: return new LLOAD_N(2);
            case 0x21: return new LLOAD_N(3);
            case 0x22: return new FLOAD_N(0);
            case 0x23: return new FLOAD_N(1);
            case 0x24: return new FLOAD_N(2);
            case 0x25: return new FLOAD_N(3);
            case 0x26: return new DLOAD_N(0);
            case 0x27: return new DLOAD_N(1);
            case 0x28: return new DLOAD_N(2);
            case 0x29: return new DLOAD_N(3);
            case 0x2a: return new ALOAD_N(0);
            case 0x2b: return new ALOAD_N(1);
            case 0x2c: return new ALOAD_N(2);
            case 0x2d: return new ALOAD_N(3);
            case 0x2e: return new IALOAD();
            case 0x2f: return new LALOAD();
            case 0x30: return new FALOAD();
            case 0x31: return new DALOAD();
            case 0x32: return new AALOAD();
            case 0x33: return new BALOAD();
            case 0x34: return new CALOAD();
            case 0x35: return new SALOAD();
            case 0x36: return new ISTORE();
            case 0x37: return new LSTORE();
            case 0x38: return new FSTORE();
            case 0x39: return new DSTORE();
            case 0x3a: return new ASTORE();
            case 0x3b: return new ISTORE_N(0);
            case 0x3c: return new ISTORE_N(1);
            case 0x3d: return new ISTORE_N(2);
            case 0x3e: return new ISTORE_N(3);
            case 0x3f: return new LSTORE_N(0);
            case 0x40: return new LSTORE_N(1);
            case 0x41: return new LSTORE_N(2);
            case 0x42: return new LSTORE_N(3);
            case 0x43: return new FSTORE_N(0);
            case 0x44: return new FSTORE_N(1);
            case 0x45: return new FSTORE_N(2);
            case 0x46: return new FSTORE_N(3);
            case 0x47: return new DSTORE_N(0);
            case 0x48: return new DSTORE_N(1);
            case 0x49: return new DSTORE_N(2);
            case 0x4a: return new DSTORE_N(3);
            case 0x4b: return new ASTORE_N(0);
            case 0x4c: return new ASTORE_N(1);
            case 0x4d: return new ASTORE_N(2);
            case 0x4e: return new ASTORE_N(3);
            case 0x4f: return new IASTORE();
            case 0x50: return new LASTORE();
            case 0x51: return new FASTORE();
            case 0x52: return new DASTORE();
            case 0x53: return new AASTORE();
            case 0x54: return new BASTORE();
            case 0x55: return new CASTORE();
            case 0x56: return new SASTORE();
            case 0x57: return new POP();
            case 0x58: return new POP2();
            case 0x59: return new DUP();
            case 0x5a: return new DUP_X1();
            case 0x5b: return new DUP_X2();
            case 0x5c: return new DUP2();
            case 0x5d: return new DUP2_X1();
            case 0x5e: return new DUP2_X2();
            case 0x5f: return new SWAP();
            case 0x60: return new IADD();
            case 0x61: return new LADD();
            case 0x62: return new FADD();
            case 0x63: return new DADD();
            case 0x64: return new ISUB();
            case 0x65: return new LSUB();
            case 0x66: return new FSUB();
            case 0x67: return new DSUB();
            case 0x68: return new IMUL();
            case 0x69: return new LMUL();
            case 0x6a: return new FMUL();
            case 0x6b: return new DMUL();
            case 0x6c: return new IDIV();
            case 0x6d: return new LDIV();
            case 0x6e: return new FDIV();
            case 0x6f: return new DDIV();
            case 0x70: return new IREM();
            case 0x71: return new LREM();
            case 0x72: return new FREM();
            case 0x73: return new DREM();
            case 0x74: return new INEG();
            case 0x75: return new LNEG();
            case 0x76: return new FNEG();
            case 0x77: return new DNEG();
            case 0x78: return new ISHL();
            case 0x79: return new LSHL();
            case 0x7a: return new ISHR();
            case 0x7b: return new LSHR();
            case 0x7c: return new IUSHR();
            case 0x7d: return new LUSHR();
            case 0x7e: return new IAND();
            case 0x7f: return new LAND();
            case 0x80: return new IOR();
            case 0x81: return new LOR();
            case 0x82: return new IXOR();
            case 0x83: return new LXOR();
            case 0x84: return new IINC();
            case 0x85: return new I2L();
            case 0x86: return new I2F();
            case 0x87: return new I2D();
            case 0x88: return new L2I();
            case 0x89: return new L2F();
            case 0x8a: return new L2D();
            case 0x8b: return new F2I();
            case 0x8c: return new F2L();
            case 0x8d: return new F2D();
            case 0x8e: return new D2I();
            case 0x8f: return new D2L();
            case 0x90: return new D2F();
            case 0x91: return new I2B();
            case 0x92: return new I2C();
            case 0x93: return new I2S();
            case 0x94: return new LCMP();
            case 0x95: return new FCMPL();
            case 0x96: return new FCMPG();
            case 0x97: return new DCMPL();
            case 0x98: return new DCMPG();
            case 0x99: return new IFEQ();
            case 0x9a: return new IFNE();
            case 0x9b: return new IFLT();
            case 0x9c: return new IFGE();
            case 0x9d: return new IFGT();
            case 0x9e: return new IFLE();
            case 0x9f: return new IF_ICMPEQ();
            case 0xa0: return new IF_ICMPNE();
            case 0xa1: return new IF_ICMPLT();
            case 0xa2: return new IF_ICMPGE();
            case 0xa3: return new IF_ICMPGT();
            case 0xa4: return new IF_ICMPLE();
            case 0xa5: return new IF_ACMPEQ();
            case 0xa6: return new IF_ACMPNE();
            case 0xa7: return new GOTO();
            //case 0xa8: return new JSR();
            case 0xaa: return new TABLE_SWITCH();
            case 0xab: return new LOOKUP_SWITCH();
            case 0xac: return new IRETURN();
            case 0xad: return new LRETURN();
            case 0xae: return new FRETURN();
            case 0xaf: return new DRETURN();
            case 0xb0: return new ARETURN();
            case 0xb1: return new RETURN();
            case 0xb2: return new GET_STATIC();
            case 0xb3: return new PUT_STATIC();
            case 0xb4: return new GET_FIELD();
            case 0xb5: return new PUT_FIELD();
            case 0xb6: return new INVOKE_VIRTUAL();
            case 0xb7: return new INVOKE_SPECIAL();
            case 0xb8: return new INVOKE_STATIC();
            case 0xb9: return new INVOKE_INTERFACE();
            case 0xbb: return new NEW();
            case 0xbc: return new NEWARRAY();
            case 0xbd: return new ANEWARRAY();
            case 0xbe: return new ARRAY_LENGTH();
            case 0xc0: return new CHECKCAST();
            case 0xc1: return new INSTANCEOF();
            case 0xc4: return new WIDE();
            case 0xc5: return new MULTI_ANEW_ARRAY();
            case 0xc6: return new IFNULL();
            case 0xc7: return new IFNONNULL();
            default:
                System.out.printf("OpCode = 0x%x\n", opcode);
                throw new RuntimeException("Unsupported opcode!");
        }
    }
}
